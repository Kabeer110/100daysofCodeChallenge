#day2 of #100daysofcodechallenge #vitbhopal #vitbhopalgaming
ğŸ“ŒJava Script Programming
ğŸ“ŒTopic:-Permutation
QuestionLink:
https://leetcode.com/problems/permutations/
ğŸ“ŒDescription:-Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
ğŸ“ŒTestcase 1:-
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
ğŸ“ŒTestcase 2:-
Input: nums = [0,1]
Output: [[0,1],[1,0]]
ğŸ“ŒTestcase 3:-
Input: nums = [1]
Output: [[1]]
ğŸ“ŒConstraints:-
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
ğŸ“ŒCode:-


var permute = function(letters) {
    let res = [];
    dfs(letters, [], Array(letters.length).fill(false), res);
    return res;
}

function dfs(letters, path, used, res) {
    if (path.length == letters.length) {
        // make a deep copy since otherwise we'd be append the same list over and over
        res.push(Array.from(path));
        return;
    }
    for (let i = 0; i < letters.length; i++) {
        // skip used letters
        if (used[i]) continue;
        // add letter to permutation, mark letter as used
        path.push(letters[i]);
        used[i] = true;
        dfs(letters, path, used, res);
        // remove letter from permutation, mark letter as unused
        path.pop();
        used[i] = false;
    }
}
