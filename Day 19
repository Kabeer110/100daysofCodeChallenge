#day19 of #100daysofcodechallenge #vitbhopal #vitbhopalgaming
ðŸ“ŒJava Script Programming
ðŸ“ŒTopic:- Regular Expression Matching
GithubLink:- https://lnkd.in/dzPevuZj
QuestionLink:- https://leetcode.com/problems/regular-expression-matching/
ðŸ“ŒDescription:- Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
ðŸ“ŒTestcase 1:-
Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
ðŸ“ŒTestcase 2:-
Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
ðŸ“ŒTestcase 3:-
Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
ðŸ“ŒConstraints:-
1 <= s.length <= 20
1 <= p.length <= 30
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.
ðŸ“ŒCode:-

var isMatch = function(s, p) {
    // recursion basic case
    if (!p || !p.length) return !Boolean(s.length);
    
    // first char match condition
    const first_match = s.length && (p[0] === s[0] || p[0] === '.');
	
    if (p.length > 1 && p[1] === '*') {
	
		const condition1 = isMatch(s, p.substring(2));
		
		
		const condition2 = first_match && isMatch(s.substring(1), p);
		
		
		
		return condition1 || condition2;
    } else {
        // The normal case is to match the first char then recursively match the rest chars
        return first_match && isMatch(s.substring(1), p.substring(1));
    }
};
