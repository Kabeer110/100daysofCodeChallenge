#day4 of #100daysofcodechallenge #vitbhopal #vitbhopalgaming
ðŸ“ŒJava Script Programming
ðŸ“ŒTopic:- Reverse Nodes in k-Group
QuestionLink:- https://leetcode.com/problems/reverse-nodes-in-k-group/
ðŸ“ŒDescription:- Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.
ðŸ“ŒTestcase 1:-
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
ðŸ“ŒTestcase 2:-
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
ðŸ“ŒConstraints:-
The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
ðŸ“ŒCode:-

var reverseKGroup = function(head, k) {
    // Base condition
    if (head === null || k === 1) {
        return head;
    }
    // Dummy node before head
    const dummy = new ListNode(-1);
    // Point the next of this dummy to the current head
    dummy.next = head;
    // keeping track of the previous node
    let previous = dummy;
    // keeping count of the nodes in the linked list
    let count = 0;
    // Reference to the head 
    let current = head;
    while (current !== null) {
        count++;
        if (count % k === 0) {
            previous = reverse(previous, current.next);
            current = previous.next;
        } else {
            current = current.next;
        }
    }
    return dummy.next;
};

const reverse = (start, end) => {
    let previous = start.next;
    // Current node
    let current = previous.next;
    let next;
    // Loop for the whole interval
    while (current != end) {
        next = current.next;
        current.next = start.next;
        start.next = current;
        current = next;
    }
    previous.next = end;
    // Return head node of the reversed linked list
    return previous;
}
