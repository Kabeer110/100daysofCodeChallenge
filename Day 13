#day13 of #100daysofcodechallenge #vitbhopal #vitbhopalgaming
ğŸ“ŒJava Script Programming
ğŸ“ŒTopic:- First Missing Positive
GithubLink:- https://lnkd.in/dbMcJBZE
QuestionLink:- https://leetcode.com/problems/first-missing-positive/
ğŸ“ŒDescription:- Given an unsorted integer array nums, return the smallest missing positive integer.
You must implement an algorithm that runs in O(n) time and uses constant extra space.
ğŸ“ŒTestcase 1:-
Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
ğŸ“ŒTestcase 2:-
Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
ğŸ“ŒTestcase 3:-
Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.
ğŸ“ŒConstraints:-
1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
ğŸ“ŒCode:-

var firstMissingPositive = function(nums) {
     for (let i = 0; i < nums.length; i++) {
        let idx = nums[i]-1;
        if (i == idx || nums[i] == nums[idx]) continue; // already positioned or nums[i] is a duplicate
        if (idx >= 0 && idx <= nums.length - 1) {
            [nums[i], nums[idx]] = [nums[idx], nums[i]];
            i--; // check the swapped number
        }
    }
    
    for (let i = 0; i < nums.length; i++) {
        if (i+1 == nums[i]) continue;
        else return i+1; // the next positive number which is i+1 doesn't exist in the array
    }
    
    return nums.length + 1; // the array is [1,2,...,n]
    // Time Complexity: O(n)
    // Space Complexity: O(1)
}
